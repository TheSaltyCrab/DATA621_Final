knitr::opts_chunk$set(echo = F, warning = F, message = F)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(corrplot)
library(reshape2)
library(knitr)
library(broom)
library(caret)
library(leaps)
library(MASS)
library(magrittr)
library(betareg)
library(pscl)
library(gtsummary)
library(nnet)
library(readr)
library(fastDummies)
library(ComplexHeatmap)
install.packages("complexHeatmap")
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(corrplot)
library(reshape2)
library(knitr)
library(broom)
library(caret)
library(leaps)
library(MASS)
library(magrittr)
library(betareg)
library(pscl)
library(gtsummary)
library(nnet)
library(readr)
library(fastDummies)
library(ComplexHeatmap)
install.packages("ComplexHeatmap")
polr
?polr
install.packages("polr")
knitr::opts_chunk$set(echo = F, warning = F, message = F)
t(confusionMatrix(data = predicted_class_ord4, reference = test$RiskLevel)$byClass) %>% knitr::kable()
func <- function(x) {1/(1-x)}
taylor(func, x0 = -1, n = 1)
library(pracma)
?taylor
library(calculus)
install.packages("pracma")
library(pracma)
func <- function(x) {1/(1-x)}
taylor(func, x0 = -1, n = 1)
?deriv
deriv((1/(1-x)), "x")
deriv((1/(1-x)), x)
deriv((1/(1-x)))
deriv(~(1/(1-x)))
deriv(~(1/(1-x)), "x")
deriv(~(1/(1-x)), "x")(x)
deriv(~(1/(1-x)), "x")(1)
d = deriv(~(1/(1-x)), "x")
d(1)
d(x = 1)
d
eval(d)
eval(d, x = "1")
install.packages("fancyhdr")
knitr::opts_chunk$set(echo = TRUE)
vec.x = c(5.6, 6.3, 7, 7.7, 8.4)
vec.y = c(8.8, 12.4, 14.8, 18.2, 20.8)
x.squared = vec.x^2
y.squared = vec.y^2
xy = vec.x*vec.y
xy
sum(x.squared) - sum(vec.x) ^ 2
sum(xy) - sum(vec.x)*sum(vec.y)
m =  (sum(xy) - sum(vec.x)*sum(vec.y))/(sum(x.squared) - sum(vec.x) ^ 2)
b = (sum(vec.y) - m(sum(vec.x)))/length(vec.y)
b = (sum(vec.y) - m*(sum(vec.x)))/length(vec.y)
b
m
lm(vec.y ~ vec.x)
sum(xy) - sum(vec.x)*sum(vec.y)
n = length(vec.x)
m =  (n*sum(xy) - sum(vec.x)*sum(vec.y))/(n*(sum(x.squared)) - sum(vec.x) ^ 2)
m
b = (sum(vec.y) - m*(sum(vec.x)))/length(vec.y)
b
m =  (n*sum(xy) - sum(vec.x)*sum(vec.y))/(n*(sum(x.squared)) - sum(vec.x) ^ 2)
b = (sum(vec.y) - m*(sum(vec.x)))/length(vec.y)
print(paste("Slope:", m, "\sIntercept:", b))
print(paste("Slope:", m, "\\sIntercept:", b))
print(paste("Slope:", m, "Intercept:", b))
print(paste("Slope:", round(m, 2), "Intercept:", round(b, 2)))
f = expression(24*x - 6*x*y - 8*y^3)
f
print(D(f, 'x'))
print(D(f, 'y'))
D(D(f, 'x'), 'x')
D(D(f, 'x'), 'y')
matrix(nrow = 2, ncol = 2)
problem2_mat = matrix(nrow = 2, ncol = 2)
dimnames(problem2_mat) = list(c("x", "y"), c("x", "y"))
problem2_mat
problem2_mat['x', 'x'] = D(D(f, 'x'), 'x')
problem2_mat
problem2_mat['y', 'y'] = D(D(f, 'y'), 'y')
D(D(f, 'y'), 'y')
problem2_mat['y', 'y'] = D(D(f, 'y'), 'y')
problem2_mat['y', 'y']
problem2_mat['y', 'y'] = D(D(f, 'y'), 'y')
D(D(f, 'y'), 'y')
str(D(D(f, 'y'), 'y'))
length(D(D(f, 'y'), 'y'))
problem2_mat['y', 'y'] = deriv(deriv(f, 'y'), 'y')
?deriv
deriv(f)
deriv(f, "x")
D(D(f, 'x'), 'x')
D(D(f, 'y'), 'y')
D(D(f, 'x'), 'y')
D(D(f, 'y'), 'x')
D(f, 'x')
D(f, 'y')
96*2
96*96
192/6
-192/6
9216/6
96*25
-32 - 25 + 7
1536+2400+700
(1/8) * e^16
(1/3)*exp(28) - (1/3)*exp(12)  - (1/3)*exp(22) - (1/3)*exp(6)
(1/3)*exp(28) - (1/3)*exp(12)
?exp
(exp(28) - exp(12)) - (exp(22) - exp(6))
(1/24) * exp(16) * (exp(28) - exp(12)) - (exp(22) - exp(6))
(1/24) * exp(16) * (exp(28) - exp(12)) - (exp(22) - exp(6))
-21*2.3^2 + 81*2.3 + 40*4.1 + 28*4.1*2.3 - 23(4.1^2)
-21*2.3^2 + 81*2.3 + 40*4.1 + 28*4.1*2.3 - 23*(4.1^2)
-21*2.3^2 + 81*2.3 + 40*4.1 + 28*4.1*2.3 - 23*(4.1^2)
24*(-4) - 6*(-4)*(2^2) - 8*(2^3)
24*(4) - 6*(4)*(-2^2) - 8*(-2^3)
